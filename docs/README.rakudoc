=begin pod

=head1 NAME

B<Font::Utils> - Provides routines and programs to interrogate font directories
and individual font files. 

B<NOTE>: The intent is for this module to work on Linux, MacOS, and
Windows.  Please file an issue if you need it on your OS.  The package
requires use of the 'V<PDF::Font::Loader:ver<0.8.9+>>' which has recently
been ported to those two systems.

=head1 SYNOPSIS

=begin code :lang<raku>
use Font::Utils;
my $dir = "/usr/share/fonts/opentype/freefont
font-utils list $dir;
font-utils show $font-file;
font-utils sample $font-file;
=end code

=head2 Pre-installation

On Debian and MacOS systems, install the following font-related
 packages:

=item fnt
=item fontforge
=item fonttools
=item woff-tools

Package 'fnt' installs program 'fnt' which is
a font installer. As root, use it to install
some special fonts:

=begin code
fnt install google-notoserif
fnt install google-notosans
fnt install google-notosansmono
fnt install google-notoserifjp
fnt install google-notosansjp
=end code

=head1 DESCRIPTION

B<Font::Utils> contains the following installed program, classes, and routines:

=head2 Program

=head3 font-utils

=begin code
$ font-utils <mode> [...options...]
=end code

=head3 Modes

=head4 list

C<list $directory, :$out = $*OUT>

Uses routine C<list> to provide a list
of font families and their fonts in the input directory.
Any other entry will show the user's font list:
'\$HOME/.Font-Utils/font-files.list'.

=head4 show 

C<show $font-file, :$out = $*OUT>

Uses routine C<show> to provide a list of the 
input font's attributes.

=head4 sample
=begin code
sample $font-file, :$media = 'Letter', 
                        :$out = "sample.pdf"
=end code

Uses routine C<sample> to create a PDF document showing the
input font at a default size of 12 points on Letter paper
in Portrait orientation. The glyphs printed will be from
the Latin blocks as shown at L<https://unicode.org>. 

Note not all fonts have valid glyphs for each code point.
This module attempts to block those glyphs that are not
normally used for printing such as controls and various
glyph modifiers, but ultimately each font may have
substitute glyphs the user may not want to see in
the sample. Thus the user can block use of code points by hex number
in his '$HOME/.Font-Utils/font-ignores.list' file.
That file looks like this:

=begin code
# family | type | hex code points to ignore (case insensitive)
FreeSerif  otf  ac0-acf d123 e200-f390 # <= note ranges of codes
=end code

The author has included some entries for fonts he uses, but the
user can modify it at will. After initial creation, it will
not be modified by this package.

=head2 Classes

=head3 class FaceFreeType

Contains all the attributes obtained in the C<$face> object created by module
'Font::FreeFont' from a font file loaded with the 'load-font routine 
of module 'PDF::Font::Loader'.
In addition, it adds most of the font interrogation methods from its
'Font::FreeType' $face object.

The class is instantiated by two required attributes:

=item $font - the font object created by 'PDF::Font::Loader' from a font file.

=item $font-size - the desired font size in points (72 points = 1 inch).

There is one other important attribute that affect the object creation
and its method that selects glyphs to use from the font file:

=item -  has $.limit-glyphs = False;

When True, several checks are made to eliminate some glyphs
at creation time. Any glyph that has zero width or height is ignored for the samples. 
Glyphs that are known control characters or space related are ignored.
(But the user can always declare glyphs to be ignored at all times for
certain conditions.)

=head3 Other classes

The rollowing classes aren't user classes and won't be discussed. Peruse
the source code for more information:

=item class Glyp-Str 
=item class Glyph-Row
=item class Section
=item class Ignore

=head2 Routines

In Raku font handling we are constantly dealing with various font and typesetting
parameter conversions such as length and angle units, and decimal and hexidecimal 
glyph code points. Those required for module internals and testing 
are incLuded. Some of those routines are duplicated in other
modules, but having them close by is useful.

=head3 hex2string

=begin code
sub hex2string(
    $code-point-list, 
    --> Str) is export {...}
=end code

Given a list of hexadecimal code points, convert them to a string. 
You may indicate a range of code points by separating the end points
with a hyphen.
For example:

=begin code
my @symbols = "21-2f 3a-40 5b-60 7b-7e";
my $s = hex2string @symbols;
say $s;
!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
=end code

=head3 dec2string
=begin code
sub dec2string(
    $code-point-list, 
    --> Str) is export {...}
=end code

Given a list of decimal code points, convert them to a string. 
You may indicate a range of code points by separating the end points
with a hyphen.
For example:

=begin code
my @symbols = "33-47 58-64 91-96 123-126";
my $s = dec2string @symbols;
say $s;
!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
=end code

=head3 hex2dec
=begin code
sub hex2dec(
    Str $hex
    --> Numeric
    ) is export {...}
=end code

Converts an input hex string to a decimal number.

=head3 text-box

=begin code
sub text-box(
    Str $text,
    :$font!,      #= fixed at creation
    :$font-size!, #= fixed at creation
    # variable args
    :$ulx, :$ull, #= upper-left corner coordinates
    :$width, :$height,

    
    --> PDF::Contents::Text::Box
    ) is export {...}
=end code

Given a chunk of text, a font object and font size,
returns a text-box object that can be interrogated and
manipulated and reused to print text boxes on a PDF
page. Some parameters are fixed as marked in
the signature above, but the rest can be changed
upon reuse.

Fixed parameters:

Variable parameters:

=head2 Data

Included with the module is a hash (C<%uni>) with the hexadecimal code points
for the following named sets of Unicode glyphs:

=begin table
Set name | Hash key
---------+---------
Basic Latin (ASCII) | (two sets)
+ Symbols | L-sym    
+ Characters | L-chr
Latin-1 Supplement | L1-Sup
Latin Extended A | L-Ext-A 
Latin Extended B | L-Ext-B
Latin Extended C | L-Ext-C
Latin Extended D | L-Ext-D
Latin Extended E | L-Ext-E
Latin Additional | L-Additional
Latin Ligatures  | L-Ligatures
=end table

Note that the Free Fonts do not cover all those glyphs, but the Noto
fonts do cover most if you need the largest coverage. The Free Fonts are more
attractive to my eyes, but that is an artistic decision. You can
most always find a suitable free or paid font if you look for it. 
See L<https://monotype.com>
as a good example where I found a MICR bank font file for personal desktop use
for a very reasonable price  (about the same as a couple of six-packs of my favorite IPA).

=head1 AUTHOR

Tom Browder <tbrowder@acm.org>

=head1 COPYRIGHT AND LICENSE

Â© 2024 Tom Browder

This library is free software; you may redistribute it or modify it under the Artistic License 2.0.

=end pod
